#!/usr/bin/env python

# Copyright 2020 Boston Dynamics Inc.

# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at

#     http://www.apache.org/licenses/LICENSE-2.0

# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import rospy
import message_filters
from sensor_msgs.msg import Image
from geometry_msgs.msg import PolygonStamped
from std_srvs.srv import SetBool, SetBoolResponse
from std_msgs.msg import Bool

from drspot.utils.transport import CachingPublisher as Publisher

from drspot.vitals.heart_rate_spo2 import HeartRate
from drspot.vitals.multichrome_face_tracker import FaceDetectorTracker, CalibratedCameraTrack

from drspot.config.rgb_config import ENABLE_TOPIC
from drspot.config.rgb_config import RGB_IMAGE_TOPIC, RGB_TRACKING_STATUS_TOPIC, RGB_CROPPED_IMAGE_TOPIC, RGB_REGION_IN_IMAGE_TOPIC

from drspot.config.rgb_config import CHAN_TXT, CHAN_NUM_CHANS, PBV_STATIC, PBV_UPDATE

# Use the bigger buffer and queue sizes from multichrome_face_tracker, not heart_rate_spo2
from drspot.config.rgb_config import IMG_QUEUE_SIZE, IMG_BUF_SIZE

if __name__ == '__main__':
    rospy.init_node('multi_tracker_with_hr_spo2')
    hr = HeartRate(rospy.get_name(), RGB_TRACKING_STATUS_TOPIC,
                   CHAN_TXT, CHAN_NUM_CHANS, PBV_STATIC, PBV_UPDATE)
    fdt = FaceDetectorTracker('rgb_' + rospy.get_name(),
                              RGB_TRACKING_STATUS_TOPIC,
                              Publisher(RGB_CROPPED_IMAGE_TOPIC,
                                        Image, queue_size=10),
                              Publisher(RGB_REGION_IN_IMAGE_TOPIC,
                                        PolygonStamped, queue_size=10))
    fdt.image_sub = message_filters.Subscriber(RGB_IMAGE_TOPIC, Image,
                                               queue_size=IMG_QUEUE_SIZE,
                                               buff_size=IMG_BUF_SIZE)

    exact_time_sync = rospy.get_param('exact_time_sync', False)
    image_subs = [fdt.image_sub]
    if exact_time_sync:
        image_sync = message_filters.TimeSynchronizer(image_subs, 200)
    else:
        image_sync = message_filters.ApproximateTimeSynchronizer(image_subs, 200, 0.1)

    def synced_callback_and_republish(rgb):
        fdt.image_callback(rgb)
        payload = [fdt.cropped_image_pub.get_payload()]
        if all([p is not None for p in payload]):
            hr.synced_callback(*payload)

    image_sync.registerCallback(synced_callback_and_republish)

    def handle_enable(req):
        rospy.loginfo('Setting {} enabled to {}'.format(rospy.get_name(),
                                                        req.data))
        if not req.data:
            det_msg = Bool()
            det_msg.data = False
            fdt.tracking_status_pub.publish(det_msg)

        fdt.enabled = req.data
        return SetBoolResponse(True, '')

    s = rospy.Service(ENABLE_TOPIC, SetBool, handle_enable)
    rospy.spin()
